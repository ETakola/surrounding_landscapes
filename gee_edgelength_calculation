// GEE code to calculate edge length in meters for each land class

// Overall Important comments: 
// * the edge length calculation is "heavier" than the calculation of area and proportion. 
// Therefore, you might get errors while processing. Just rerun the code, and rerun only years that had errors computing !separately!, so one year per run. 
// * Also, year 2009 has around a 1000 of observations. Hence, it cannot be computed in one go. This year only has been devided in two datasets: part 1 and part 2. So, when runninng the script DO NOT run 
// So, when runninng the script DO NOT run "lm_edgelength_5000m_2009", run 'lm_edgelength_5000m_2009_p1' and 'lm_edgelength_5000m_2009_p2' (section 6) insted. 

// Table of contents: 
/* 
(1) Import the Image Collections and the points dataset
(2) Filter points by year 
(3) Function to buffer the points
(4) Edge Length Calculation
(4.1)  Write a list of all class values
(4.2) Select images
(4.3) Apply the Canny edge detection
(4.4) General function to calculate the edge length for each class
(4.5) Function to process edge lengths for points in a given year
(4.6) Apply function to process edge lengths for points in each year
(4.7) Function to unpack the edge_lengths list and create a new feature collection
(4.8) Apply function to unpack the edge_lengths over the original feature collection, flatten the result, and export in directly
(5) Same procedure for annual mosaic
(6) Processing 2009
(6.1) import the datasets
(6.2) Select images
(6.3) Apply edge detection to get the boundaries of the classes for 2009
(6.4) Function to process edge lengths for 2009 only
(6.5) Apply function to process edge lengths for points in 2009
(6.6) Map over the original feature collection and flatten the result
(6.7) Export to csv
*/ 



/////// (1) Import the Image Collections and the points dataset ////////////////////////////////////

var five_year = ee.ImageCollection('projects/sat-io/open-datasets/GLC-FCS30D/five-years-map');
var annual = ee.ImageCollection('projects/sat-io/open-datasets/GLC-FCS30D/annual');
var points = ee.FeatureCollection('projects/ee-elizaveta/assets/yield_points_in_wide_format');

/////// (2) Filter points by year ////////////////////////////////////

var years = [1985, 1990, 1995];
var filteredPoints = {};
years.forEach(function(year) {
  filteredPoints[year] = points.filter(ee.Filter.eq('pr_land_cover_Year', year.toString()));
});

/////// (3) Function to buffer the points ////////////////////////////////////
// if bounds set to "true" then square bounds if to "false" or not indicated then circle bounds 
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    var bufferedGeom = bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
    return ee.Feature(bufferedGeom).copyProperties(pt);
  };
}

/////// (4) Edge Length Calculation ////////////////////////////////////
// edge detection will be a long function with many subfuncitons and parameteres. thats why it is important to define minor things outside of the main function body.

// (4.1)  Write a list of all class values
var classes = [10, 11, 12, 20, 51, 52, 61, 62, 71, 72, 81, 82, 91, 92, 120, 121, 122, 
               130, 140, 150, 152, 153, 181, 182, 183, 184, 185, 186, 187, 190, 200, 
               201, 202, 210, 220, 0];


// (4.2) Select images
var images = {
  1985: five_year.mosaic().select('b1'),
  1990: five_year.mosaic().select('b2'),
  1995: five_year.mosaic().select('b3')
};

// (4.3) Apply the Canny edge detection
var edges = {};
years.forEach(function(year) {
  edges[year] = ee.Algorithms.CannyEdgeDetector({
    image: images[year], 
    threshold: 0.7,
    sigma: 1
  }).selfMask();
});


// (4.4) General function to calculate the edge length for each class
function calculateEdgeLength(image, edges, geometry, classValue) {
  var classMask = image.eq(classValue);
  var classEdges = edges.updateMask(classMask);
  var edgeLength = classEdges.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geometry,  
    scale: 30,
    maxPixels: 1e9
  }).get(image.bandNames().get(0));
  return ee.Dictionary({class: classValue, length_m: edgeLength});
}

// (4.5) Function to process edge lengths for points in a given year
function processEdgesForYear(filteredPoints, image, edges, year) {
  var bufferedPoints = filteredPoints.map(bufferPoints(5000));
  var results = bufferedPoints.map(function(point) {
    var edgeLengths = ee.List(classes.map(function(classValue) {
      return calculateEdgeLength(image, edges, point.geometry(), classValue); // here you can see that you redefined geometry based on each point in your dataset
    }));
    return point.set('edge_lengths', edgeLengths);
  });
  return results;
}

// (4.6) Apply function to process edge lengths for points in each year
var edgeLengths = {}; // create an empty dictionary
years.forEach(function(year) {
  edgeLengths[year] = processEdgesForYear(filteredPoints[year], images[year], edges[year], year);
});


// (4.7) Function to unpack the edge_lengths list and create a new feature collection
function unpackEdgeLengths(feature) {
  var edgeLengths = ee.List(feature.get('edge_lengths'));
  var newFeatures = edgeLengths.map(function(el) {
    el = ee.Dictionary(el);
    return feature.copyProperties(feature).set({
      'class': el.get('class'),
      'length_m': el.get('length_m')  
    });
  });
  return ee.FeatureCollection(newFeatures);
}

// (4.8) Apply function to unpack the edge_lengths over the original feature collection, flatten the result, and export in directly
years.forEach(function(year) {
  var unpackedFeatureCollection = ee.FeatureCollection(edgeLengths[year]).map(unpackEdgeLengths).flatten(); 
  Export.table.toDrive({
    collection: unpackedFeatureCollection,
    description: 'lm_edgelength_5000m_' + year,
    folder: "GEE edgelength 5000 m",
    fileFormat: 'CSV'
  });
});

/////// (5) Same procedure for annual mosaic   ////////////////////////////////////

var annualmosaic = annual.mosaic();

for (var i = 1; i <= 17; i++) {
  var year = 1999 + i; // starts at year 2000 for annual maps
  var image = annualmosaic.select("b" + i);
  var filteredPoints = points.filter(ee.Filter.eq('pr_land_cover_Year', year.toString()));
  
  var edges = ee.Algorithms.CannyEdgeDetector({
    image: image, 
    threshold: 0.7,
    sigma: 1
  }).selfMask();
  
  var edgeLengths = processEdgesForYear(filteredPoints, image, edges, year.toString());

  var unpackedFeatureCollection = edgeLengths.map(unpackEdgeLengths).flatten();

  Export.table.toDrive({
    collection: unpackedFeatureCollection,
    description: 'lm_edgelength_5000m_' + year,
    folder: "GEE edgelength 5000 m",
    fileFormat: 'CSV'
  });
}


/////// (6) Processing 2009   ////////////////////////////////////

// (6.1) import the datasets
var points_p1 = ee.FeatureCollection('projects/ee-elizaveta/assets/yield_points_in_wide_format_2009_part1');
var points_p2 = ee.FeatureCollection('projects/ee-elizaveta/assets/yield_points_in_wide_format_2009_part2');

// (6.2) Select images
var image_2009 = annual.mosaic().select('b10');

// (6.3) Apply edge detection to get the boundaries of the classes for 2009
var edges_2009 = ee.Algorithms.CannyEdgeDetector({
  image: image_2009, 
  threshold: 0.7,
  sigma: 1
}).selfMask();

// (6.4) Function to process edge lengths for 2009 only
function processEdges(points, image, edges) {
  var bufferedPoints = points.map(bufferPoints(5000));
  var results = bufferedPoints.map(function(point) {
    var edgeLengths = ee.List(classes.map(function(classValue) {
      return calculateEdgeLength(image, edges, point.geometry(), classValue);
    }));
    return point.set('edge_lengths', edgeLengths);
  });
  return results;
}

// (6.5) Apply funciton to process edge lengths for points in 2009
var edgeLengths_2009_p1 = processEdges(points_p1, image_2009, edges_2009);
var edgeLengths_2009_p2 = processEdges(points_p2, image_2009, edges_2009);

// (6.6) Map over the original feature collection and flatten the result
var unpackedFeatureCollection_2009_p1 = ee.FeatureCollection(edgeLengths_2009_p1.map(unpackEdgeLengths)).flatten();
var unpackedFeatureCollection_2009_p2 = ee.FeatureCollection(edgeLengths_2009_p2.map(unpackEdgeLengths)).flatten();

// (6.7) Export to csv 
Export.table.toDrive({
   collection: unpackedFeatureCollection_2009_p1,
   description: 'lm_edgelength_5000m_2009_p1',
   folder: "GEE edgelength 5000m",
   fileFormat: 'CSV'
});

Export.table.toDrive({
   collection: unpackedFeatureCollection_2009_p2,
   description: 'lm_edgelength_5000m_2009_p2',
   folder: "GEE edgelength 5000m",
   fileFormat: 'CSV'
});

