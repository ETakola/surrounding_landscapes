// GEE code to calculate area in meters square of each land class

/* Table of contents: 
(1) Import the Image Collections and the points dataset
(2) Filter the points to create yearly subsets
(3) Write the function to create a buffer around your points
(4) Write the function to calculate the area in square meters and proportion of each class, and write a feature collection
(4.1) Area calculation
(4.1.1) Function to calculate the area
(4.1.2) Writing a feature collection
(4.1.2.1) fx is a function that takes one "small" dictionary that contains only one class and its area and converts it to a feature
(4.1.2.2) Apply fx function to all dictionaries from the list classAreas
(4.1.2.3) Write a complete feature collection containing all classes and their areas
(4.2) Proportion calculation
(4.2.1) Sum all areas to get the total area
(4.2.2) Compute proportion for each class and include original region properties
(4.2.3) Add proportion to the previously (4.1.2.3) created collection
(5) Apply the Area and Proportion Calculation to the Images
(5.1) Choose your image
(5.2) Set your resolution to 30m based on the resolution of our image collection
(5.3) Apply the compositionImage function to multiple polygons
(5.3.1) General function to apply compositionImage
(5.3.2) Apply compositionImage only for 1985 image
(5.3.3) Apply compositionImage only for 1990 image
(5.3.4) Apply compositionImage only for 1995 image
(5.4) Write the results with buffers
(6) Export the results
(7) Same procedure for annual mosaic. Here it is easier to iterate through all years in a loop

*/ 

/////// (1) Import the Image Collections and the points dataset ////////////////////////////////////

// import immage collections 
var five_year = ee.ImageCollection('projects/sat-io/open-datasets/GLC-FCS30D/five-years-map'); // image collection for 1985, 1990, 1995 ("b1", "b2", "b3")
var annual = ee.ImageCollection('projects/sat-io/open-datasets/GLC-FCS30D/annual'); // image collection annual for 2000-2022 ("b1"-"b23")
var points = ee.FeatureCollection('projects/ee-elizaveta/assets/yield_points_in_wide_format'); // yield points from the dataset 

// since the years 1985-1995 and 2000-2022 are two different image collections, we work with them separately

/////// (2) Filter the points to create yearly subsets  ////////////////////////////////////

var filteredPoints_1985 = points.filter(ee.Filter.eq('pr_land_cover_Year', "1985")); // filter points, where the land cover map's year was assigned to 1985 in the column pr_land_cover_Year (same for the following points)
var filteredPoints_1990 = points.filter(ee.Filter.eq('pr_land_cover_Year', "1990"));
var filteredPoints_1995 = points.filter(ee.Filter.eq('pr_land_cover_Year', "1995"));

/////// (3) Write the function to create a buffer around your points   ////////////////////////////////////

// function to buffer the points 
// you can indicate your radius of the buffer in meters and bounds if you want to have a square or a circle around your point 
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt); // here you take one point (feature) from the dataset 
    var bufferedGeom = bounds ? pt.buffer(radius).bounds() : pt.buffer(radius); //  This line checks if bounds is set to "true". If bounds is true, it creates a buffer around the point pt with a specified radius and then converts this buffer to its bounding rectangle. If bounds is false or not defined, it simply creates a buffer around the point pt with the specified radius.
    return ee.Feature(bufferedGeom).copyProperties(pt); // here you create a buffer around the point and copy the properties from the original dataset. 
  };
}

/////// (4) Write the function to calculate the area in square meters and proportion of each class, and write a feature collection   ////////////////////////////////////

// funciton to calculate the area and proportion of each class 
// cc(based on the Image Composition function by @DavidTheobald)

var compositionImage = function(image, resolution, region) { // you can define your image, resolution and region.
  var resolution = resolution || 1000; // the default resolution is set to 1000 m

// (4.1) Area calculation 

// (4.1.1) funciton to calculate the area 
  var imageArea = ee.Image.pixelArea().addBands(image);
  var areaDict = imageArea.reduceRegion({
    reducer: ee.Reducer.sum().group({
      groupField: 1, // specifies that the grouping is done based on the values of the second band (0-based index, so the second band is indexed by 1)
      groupName: 'class' // here you see that the area is calculated for every "class" defined in the image collection 
    }),
    geometry: region.geometry(),
    scale: resolution,
    maxPixels: 1e13
  });

// As a result you will get multiple dictionaries for each class. Yet, you want to have one single table (feature collection) that you can then export as a csv. 
// So, the following steps are addressing this issue. 

// (4.1.2) writing a feature collection
  var classAreas = ee.List(areaDict.get('groups')); // classAreas is a list of dictionaries of all classes. 
  
// (4.1.2.1 ) fx is a funciton that takes one "small" dictionary that contains only one class and its area and converts it to a feature
  var fx = function(x) {  
    var areaDict = ee.Dictionary(x);
    var classNumber = ee.Number(areaDict.get('class')).format();
    var area = ee.Number(areaDict.get('sum'));
    return ee.Feature(null, {
      'class': classNumber,
      'areaM2': area
    });
  };

// (4.1.2.2) apply fx funciton to all dictionaries from the list classAreas

  var features = classAreas.map(fx);  // here you iterate through all classes
  
// (4.1.2.3) write a complete feature collection containing all classes and their areas
  var fcOut = ee.FeatureCollection(features); 

// (4.2) Proportion calculation  

// (4.2.1) Sum all areas to get the total area
  var totalArea = fcOut.aggregate_sum('areaM2'); // here you sum up all the areas of classes whithin the buffer

// (4.2.2) Compute proportion for each class and include original region properties
  fcOut = fcOut.map(function(feature) {
    var area = ee.Number(feature.get('areaM2'));
    var proportion = area.divide(totalArea);
    
// (4.2.3) Add proportion to the previously (4.1.2.3) created collection
    var properties = region.toDictionary();
    return feature.set(properties).set('proportion', proportion);
  });

  return fcOut;
};

/////// (5) Apply the area and proportion calculation to the images   ////////////////////////////////////

// (5.1) choose your image 
var image_1985 = five_year.mosaic().select('b1');
var image_1990 = five_year.mosaic().select('b2');
var image_1995 = five_year.mosaic().select('b3');

// (5.2) set your resolution to 30m based on the resolution of our image collection
var resolution = 30; 

// (5.3) apply the compositionImage function to multiple polygons

// (5.3.1) general function to apply  compositionImage
var applyComposition = function(feature) {
  return compositionImage(image, resolution, feature);
};

// (5.3.2) applyComposition only for 1985 image 
var applyComposition_1985 = function(feature) {
  return compositionImage(image_1985, resolution, feature);
};
// (5.3.3) applyComposition only for 1990 image 
var applyComposition_1990 = function(feature) {
  return compositionImage(image_1990, resolution, feature);
};
// (5.3.4) applyComposition only for 1995 image 
var applyComposition_1995 = function(feature) {
  return compositionImage(image_1995, resolution, feature);
};


// (5.4) write the results with buffers 
// (1) choose your feature collection "filteredPoints_", (2) apply buffers, (3) apply applyComposition, (4) flatten to get one table and not list of dictionaries
var results_1985 = filteredPoints_1985.map(bufferPoints(5000)).map(applyComposition_1985).flatten(); 
var results_1990 = filteredPoints_1985.map(bufferPoints(5000)).map(applyComposition_1990).flatten(); 
var results_1995 = filteredPoints_1985.map(bufferPoints(5000)).map(applyComposition_1995).flatten();


/////// (6) Export the results   ////////////////////////////////////

Export.table.toDrive({
  collection: results_1985,
  description: 'lm_area_proportion_1985',
  folder: "GEE area proportion 5000 m",
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: results_1990,
  description: 'lm_area_proportion_1990',
  folder: "GEE area proportion 5000 m",
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: results_1995,
  description: 'lm_area_proportion_1995',
  folder: "GEE area proportion 5000 m",
  fileFormat: 'CSV'
});


/////// (7) Same procedure for annual mosaic. Here it is easier to iterate through all years in a loop   ////////////////////////////////////
var annualmosaic = annual.mosaic();

// Iterate over each band (year) in the image
for (var i = 1; i <= 17; i++) {
  var year = 1999 + i; // starts at year 2000 for annual maps
  var image = annualmosaic.select("b" + i);
  var filteredPoints = points.filter(ee.Filter.eq('pr_land_cover_Year', year.toString()));
  var results_annual = filteredPoints.map(bufferPoints(5000,true)).map(applyComposition).flatten();
  
  Export.table.toDrive({
  collection: results_annual,
  description: 'lm_area_proportion' + year.toString(),
  folder: "GEE area proportion 5000 m",
  fileFormat: 'CSV'
});

}
